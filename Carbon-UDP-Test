!DataDictionary
version: 20200424
sources:
  - !DataSource
    name: carbon
    source: carbon
    datatype: carbon_views
views:
  - name: soil_sample_receiving_lab
    hidden: true
    description: Reference view for soil testing Lab with lab name and lab id.
    columns:
      lab_id:
        type: integer
        description: Lab ID.
      lab_name:
        type: string
        description: Lab name.
    source: |
      select 1 as lab_id, 'BROOKSIDE' as lab_name union
      select 2, 'REGEN AG LAB';
  - name: states_lab
    hidden: true
    description: Record of which states are currently eligible for Indigo carbon and which states direct carbon soil samples to which lab. We will update as operations and modeling expands.
    columns:
      state:
        type: string
        description: US state. This should inner to the boundary_qa.field.state field to apply this to field level data.
      state_eligible_for_carbon:
        type: boolean
        description: Our current carbon program eligibility indication for that state.
      lab_id:
        type: integer
        description: Soil testing lab ID.
    source: |
      select 'ALABAMA' as state, FALSE as state_eligible_for_carbon, 1 as lab_id union
      select 'ALASKA', FALSE, 2 union
      select 'ARIZONA', FALSE, 2 union
      select 'ARKANSAS', TRUE, 1 union
      select 'CALIFORNIA', FALSE, 1 union
      select 'COLORADO', TRUE, 2 union
      select 'CONNECTICUT', FALSE, 2 union
      select 'DELEWARE', FALSE, 2 union
      select 'FLORIDA', FALSE, 2 union
      select 'GEORGIA', TRUE, 1 union
      select 'HAWAII', FALSE, 2 union
      select 'IDAHO', FALSE, 2 union
      select 'ILLINOIS', TRUE, 2 union
      select 'INDIANA', TRUE, 2 union
      select 'IOWA', TRUE, 2 union
      select 'KANSAS', TRUE, 2 union
      select 'KENTUCKY', TRUE, 2 union
      select 'LOUISIANA', TRUE, 1 union
      select 'MAINE', FALSE, 2 union
      select 'MARYLAND', FALSE, 2 union
      select 'MASSACHUSETTS', FALSE, 2 union
      select 'MICHIGAN', FALSE, 2 union
      select 'MINNESOTA', TRUE, 2 union
      select 'MISSISSIPPI', TRUE, 1 union
      select 'MISSOURI', TRUE, 2 union
      select 'MONTANA', FALSE, 2 union
      select 'NEBRASKA', TRUE, 2 union
      select 'NEVADA', FALSE, 2 union
      select 'NEW HAMPSHIRE', FALSE, 2 union
      select 'NEW JERSEY', FALSE, 2 union
      select 'NEW MEXICO', FALSE, 2 union
      select 'NEW YORK', FALSE, 2 union
      select 'NORTH CAROLINA', TRUE, 1 union
      select 'NORTH DAKOTA', TRUE, 2 union
      select 'OHIO', TRUE, 2 union
      select 'OKLAHOMA', TRUE, 1 union
      select 'OREGON', FALSE, 2 union
      select 'PENNSYLVANIA', FALSE, 2 union
      select 'RHODE ISLAND', FALSE, 2 union
      select 'SOUTH CAROLINA', TRUE, 1 union
      select 'SOUTH DAKOTA', TRUE, 2 union
      select 'TENNESSEE', TRUE, 1 union
      select 'TEXAS', TRUE, 1 union
      select 'UTAH', FALSE, 2 union
      select 'VERMONT', FALSE, 2 union
      select 'VIRGINIA', FALSE, 2 union
      select 'WASHINGTON', FALSE, 2 union
      select 'WEST VIRGINIA', FALSE, 2 union
      select 'WISCONSIN', FALSE, 2 union
      select 'WYOMING', FALSE, 2;
  - name: states
    description: Record of which states are currently eligible for Indigo carbon and which states direct carbon soil samples to which lab. We will update as operations and modeling expands.
    columns:
      state:
        type: string
        description: US state. This should inner to the boundary_qa.field.state field to apply this to field level data.
      state_eligible_for_carbon:
        type: boolean
        description: Our current carbon program eligibility indication for that state.
      soil_lab:
        type: string
        description: Soil testing lab.
    source: |
      select states_lab.state
      ,states_lab.state_eligible_for_carbon
      ,soil_sample_receiving_lab.lab_name as soil_lab
      from states_lab
      join soil_sample_receiving_lab
      on states_lab.lab_id = soil_sample_receiving_lab.lab_id;
  - name: opportunity
    description: Full set of carbon opportunities. This is the master source of opportunitiy ids for carbon contracts.
    columns:
      opportunity_id:
        type: string
        description: SFDC opportunity ID
      opportunity_name:
        type: string
        description: SFDC opportunity name
      account_id:
        type: string
        description: SFDC account ID associated with the opportunity
      selling_season:
        type: string
        description: Selling season of the opportunity.
      stage_name:
        type: string
        description: Opportunity stage name. Includes all stages.
      opportunity_acres:
        type: float
        description: Total acres listed on the SFDC opportunity.
      created_date:
        type: timestamp_ntz
        description: Timestamp of opportunity creation.
      close_date:
        type: datetime
        description: Close date of the opportunity.
      opportunity_type:
        type: string
        description: SFDC record type name for the opportunity.
    source: |
      select opp.id as opportunity_id
      , opp.name as opportunity_name
      , opp.account_id
      , opp.selling_season_c as selling_season
      , opp.stage_name
      , opp.total_acres_c as opportunity_acres
      , opp.created_date
      , opp.close_date
      , r.name as opportunity_type
      from PARTHENON.SALESFORCE_V2.OPPORTUNITY opp
      join PARTHENON.SALESFORCE_V2.RECORD_TYPE r
      on opp.record_type_id = r.id
      where r.name = 'Indigo Carbon'
      and opp.selling_season_c is not null 
      and opp.name not ilike '%test%'
      and (opp.is_deleted is null or opp.is_deleted = False);
  - name: indigo_acres_opportunity
    description: Full set of Indigo Acre opportunities. These growers should also have a carbon opportunity and therefore we want to track these opportunities in the carbon schema.
    columns:
      opportunity_id:
        type: string
        description: SFDC opportunity ID
      opportunity_name:
        type: string
        description: SFDC opportunity name
      account_id:
        type: string
        description: SFDC account ID associated with the opportunity
      selling_season:
        type: string
        description: Selling season of the opportunity.
      stage_name:
        type: string
        description: Opportunity stage name. Includes all stages.
      opportunity_acres:
        type: float
        description: Total acres listed on the SFDC opportunity.
      created_date:
        type: timestamp_ntz
        description: Timestamp of opportunity creation.
      close_date:
        type: datetime
        description: Close date of the opportunity.
      offer_type:
        type: string
        description: The indication of whether the opportunity is Indigo Plus or Complete.
      opportunity_type:
        type: string
        description: SFDC record type name for the opportunity.
    source: |
      select opp.id as opportunity_id
      , opp.name as opportunity_name
      , opp.account_id
      , opp.selling_season_c as selling_season
      , opp.stage_name
      , opp.total_acres_c as opportunity_acres
      , opp.created_date
      , opp.close_date
      , opp.indigo_offer_type_c as offer_type
      , r.name as opportunity_type
      from PARTHENON.SALESFORCE_V2.OPPORTUNITY opp
      join PARTHENON.SALESFORCE_V2.RECORD_TYPE r
      on opp.record_type_id = r.id
      where r.name = 'Indigo Acres'
      and opp.selling_season_c is not null 
      and opp.name not ilike '%test%'
      and (opp.is_deleted is null or opp.is_deleted = False);
  - name: sfdc_qualifier
    description: Salesforce qualifier data tracking account level eligibility information.
    columns:
      account_id:
        type: string
        description: SFDC account ID
      opportunity_id:
        type: string
        description: SFDC opportunity ID
      qualifier_name:
        type: string
        description: SFDC qualifier name
      is_your_land_crop_land_or_pasture_land:
        type: string
        description: Response to cropland and pastureland qualifier question in SFDC.
      cc_cleared_within_10_years:
        type: string
        description: Response to land clearing qualifier question in SFDC.
      carbon_sequestration_compensation:
        type: string
        description: Response to existing carbon sequestration qualifier question in SFDC.
      carbon_sequestration_programs:
        type: string
        description: Programs the grower mentioned they are enrolled in.
      last_modified_date:
        type: datetime
        description: Last date qualifier was modified.
      rank:
        type: float
        description: Ranking of qualifier response by opportunity_id to mark most recent response.
      qualifier_is_eligible_according_to_sfdc:
        type: boolean
        description: SFDC qualifier is eligible only according to the qualifier. We need to join with closed won opportunity.
    source: |
      select account_c as account_id
      , opportunity_c as opportunity_id
      , name as qualifier_name
      , is_your_land_crop_land_or_pasture_land_c as is_your_land_crop_land_or_pasture_land
      , cc_cleared_within_10_years_c as cc_cleared_within_10_years
      , carbon_sequestration_compensation_c as carbon_sequestration_compensation
      , carbon_sequestration_programs_c as carbon_sequestration_programs
      , last_modified_date
      , row_number() over( 
          partition by opportunity_c  
          order by 
            case when coalesce(is_your_land_crop_land_or_pasture_land_c,'ZZ') || coalesce(cc_cleared_within_10_years_c,'ZZ') || coalesce(carbon_sequestration_compensation_c ,'ZZ') ilike 'YNN' then 1
                when coalesce(is_your_land_crop_land_or_pasture_land_c,'ZZ') || coalesce(cc_cleared_within_10_years_c,'ZZ') || coalesce(carbon_sequestration_compensation_c ,'ZZ') not ilike 'YNN'
                  and length(coalesce(is_your_land_crop_land_or_pasture_land_c,'ZZ') || coalesce(cc_cleared_within_10_years_c,'ZZ') ||coalesce(carbon_sequestration_compensation_c ,'ZZ') )<>3 then 2
                else 3 
            end asc
          , last_modified_date desc
        ) as rank
      , case when
            is_your_land_crop_land_or_pasture_land_c = 'Yes' and 
            cc_cleared_within_10_years_c = 'No' and 
            carbon_sequestration_compensation_c = 'No'
            then True else False end as qualifier_is_eligible_according_to_sfdc  
      from PARTHENON.SALESFORCE_V2.qualifiers_c 
      where account_c is not null
      and opportunity_c is not null
      and (is_deleted is null or is_deleted = False);
  - name: all_contracts
    description: Contract specific to Carbon credits. This includes the original contract and amendments for carbon opportunities using opportunity.
    columns:
      id:
        type: string
        description: Salesforce ID for the contract. Use account_id or opportunity_id to join to SFDC data.
      contract_number:
        type: string
        description: The contract number
      legal_entity_id:
        type: string
        description: Salesforce ID for the legal entity associated with the contract. This is the same as account_id.
      opportunity_id:
        type: string
        description: Salesforce opportunity ID associated with the contract
      season:
        type: string
        description: Season to which the contract applies
      activated_date:
        type: datetime
        description: The date on which the contract was activated
      total_acres:
        type: float
        description: Contracted acres. The total number of acres on the contract.
      contract_type:
        type: string
        description: Type of contract.  We filter for contracts associated with a carbon opportunity.
      contract_status:
        type: string
        description: Contract status
    source: |
      select id
      , contract_number
      , legal_entity_id
      , opportunity_id
      , season
      , activated_date
      , total_acres
      , contract_type
      , status as contract_status
      from PARTHENON.ACCOUNTS.CONTRACT
      where opportunity_id in (select distinct opportunity_id from OPPORTUNITY);
  - name: contract
    description: The most recent contract associated with carbon opportunities. This is one active contract per opportunity.
    columns:
      id:
        type: string
        description: Salesforce ID for the contract
      contract_number:
        type: string
        description: The contract number
      legal_entity_id:
        type: string
        description: Salesforce ID for the legal entity associated with the contract. This is the same as the account_id.
      opportunity_id:
        type: string
        description: Salesforce opportunity ID associated with the contract
      season:
        type: string
        description: Season to which the contract applies
      activated_date:
        type: datetime
        description: The date on which the contract was activated
      total_acres:
        type: float
        description: The total number of acres on the contract.
      contract_type:
        type: string
        description: Type of contract.  We filter for "Carbon Credits"
      contract_status:
        type: string
        description: Contract status
      contracts:
        type: array
        description: Array of contracts associated with single SFDC opportunity.
    source: |
      with CTE_ALL_CONTRACTS as (
      select id
      , contract_number
      , legal_entity_id
      , opportunity_id
      , season
      , activated_date
      , total_acres 
      , contract_type
      , contract_status
      , row_number() over (partition by opportunity_id order by activated_date desc) as rank
      , array_agg(contract_number) within group (order by activated_date desc) over (partition by opportunity_id) as contracts
      from ALL_CONTRACTS
      where contract_status in ('Activated', 'Amended')
      )
      select id
      , contract_number
      , legal_entity_id
      , opportunity_id
      , season
      , activated_date
      , total_acres 
      , contract_type
      , contract_status
      , contracts
      from CTE_ALL_CONTRACTS
      where rank = 1;
  - name: ifw_carbon_qualifier
    description: Qualifier questions from IFW. This will likely be replaced by forthcoming IFW views.
    columns:
      ifw_account_email:
        type: string
        description: Email account associated with IFW qualifier entry.
      dca_grower_id:
        type: string
        description: DCA grower ID.
      total_acres:
        type: float
        description: Total operation acres reported by grower on IFW.
      eligibility_cleared_land:
        type: string
        description: IFW response to land clearing qualifier.
      eligibility_sequestration_program:
        type: string
        description: IFW response to carbon compensation qualifier.
      account_id:
        type: string
        description: SFDC account ID.
      salesforce_name:
        type: string
        description: Account name from DCA grower table.
      opp_is_eligible_according_to_ifw:
        type: boolean
        description: Boolean indicator of eligibility according to IFW questions.
    source: |
      with CTE_IFW_USERS as (
        select user_profile.user_id as ifw_account_email
          , metadata
          , to_char(metadata['primaryEntityId']) as dca_grower_id
          , to_numeric(metadata['entities'][0]['carbonEnrollmentSubmission']['acres']) as total_acres
          , to_char(metadata['entities'][0]['carbonEnrollmentSubmission']['clearedAllLand']) as eligibility_cleared_land
          , to_char(metadata['entities'][0]['carbonEnrollmentSubmission']['sequesteredAllLand']) as eligibility_sequestration_program
        from PARTHENON.dca_db.dca_user_profiles AS user_profile
        where contains(metadata, 'carbon')
      ), CTE_QUALIFIERS_FROM_IFW as (
        select users.ifw_account_email
          , users.dca_grower_id
          , users.total_acres
          , users.eligibility_cleared_land
          , users.eligibility_sequestration_program
          , growers.external_id as account_id
          , le.salesforce_name
        from CTE_IFW_USERS users
        join PARTHENON.dca_db.dca_growers AS growers
          on users.dca_grower_id = growers.id
        left join PARTHENON.accounts.legal_entity le 
          on growers.external_id = le.id
          )
          select * 
          , case when (
            i.total_acres is not null and 
            i.eligibility_cleared_land = 'No, not 100%' and 
            i.eligibility_sequestration_program = 'No, not 100%'
          ) then True else False end as opp_is_eligible_according_to_ifw
            from CTE_QUALIFIERS_FROM_IFW i;
  - name: grower_opportunity_detail
    description: Opportunity level view of up to date closed won carbon opportunities, qualifiers, and contracts. This is the master view of carbon opportunities and accounts.
    columns:
      opportunity_id:
        type: string
        description: Opportunity ID from SFDC.
      opportunity_name:
        type: string
        description: Opportunity name from SFDC.
      account_id:
        type: string
        description: SFDC account associated with the opportunity
      opportunity_date:
        type: timestamp_tz
        description: Opportunity closed won date
      opportunity_type:
        type: string
        description: Type of SFDC opportunity - Carbon or Indigo acres
      contract_status:
        type: string
        description: SFDC status of contract
      activated_date:
        type: timestamp_tz
        description: Date the contract was activated
      contract_acres:
        type: float
        description: The total number of acres on the contract.
      contract_number:
        type: float
        description: Contract number
      contracts:
        type: array
        description: Array of carbon and IA contract numbers associated with that account ID.
      is_your_land_crop_land_or_pasture_land:
        type: string
        description: Response to cropland and pastureland qualifier question in SFDC.
      cc_cleared_within_10_years:
        type: string
        description: Response to land clearing qualifier question in SFDC.
      carbon_sequestration_compensation:
        type: string
        description: Response to existing carbon sequestration qualifier question in SFDC.
      qualifier_is_eligible_according_to_sfdc:
        type: boolean
        description: Boolean indicating if qualifier makes opportunity eligible in SFDC.
      eligibility_cleared_land:
        type: string
        description: IFW response to land clearing qualifier.
      eligibility_sequestration_program:
        type: string
        description: IFW response to carbon compensation qualifier.
      opp_is_eligible_according_to_ifw:
        type: boolean
        description: Boolean indicating if qualifier makes opportunity eligible in IFW.
      opportunity_is_eligible:
        type: boolean
        description: Boolean if SFDC opportunity has eligible qualifier and closed won opportunity.
      is_eligible_for_carbon:
        type: boolean
        description: Final statement on whether opportunity and contract is eligible for carbon.
      eligibility_source:
        type: string
        description:
    source: |
      with QUALIFIER as (
        select * 
          from SFDC_QUALIFIER
          where rank = 1
      )
      select o.opportunity_id
        , o.opportunity_name
        , o.account_id
        , o.close_date
        , o.opportunity_type
        , c.contract_status
        , c.activated_date
        , c.total_acres as contract_acres
        , c.contract_number
        , c.contracts
        , q.is_your_land_crop_land_or_pasture_land
        , q.cc_cleared_within_10_years
        , q.carbon_sequestration_compensation
        , q.qualifier_is_eligible_according_to_sfdc
        , i.eligibility_cleared_land
        , i.eligibility_sequestration_program
        , i.opp_is_eligible_according_to_ifw
        , case when o.stage_name = 'Closed Won' and q.qualifier_is_eligible_according_to_sfdc = True then True else False end as opportunity_is_eligible
        , case when c.contract_number is not null and (opportunity_is_eligible or opp_is_eligible_according_to_ifw) then True else False end as is_eligible_for_carbon
        , case 
            when ifnull(qualifier_is_eligible_according_to_sfdc, False) AND ifnull(opp_is_eligible_according_to_ifw, False) then 'Both'
            when ifnull(qualifier_is_eligible_according_to_sfdc, False) and NOT ifnull(opp_is_eligible_according_to_ifw, False) then 'SFDC Only'
            when ifnull(opp_is_eligible_according_to_ifw, False) and NOT ifnull(qualifier_is_eligible_according_to_sfdc, False) then 'IFW Only'  
          end as eligibility_source
        from OPPORTUNITY o
        left join CONTRACT c
        on o.opportunity_id = c.opportunity_id
        left join QUALIFIER q
        on o.opportunity_id = q.opportunity_id
        left join IFW_CARBON_QUALIFIER i
        on o.account_id = i.account_id
        where o.stage_name = 'Closed Won';
  - name: grower
    description: Account level summary of whether the grower has at least one eligible carbon related opportunity. This eligibilty indicator is at the account level, not contract level.
    columns:
      account_id:
        type: string
        description: SFDC account ID
      is_eligible_for_carbon:
        type: boolean
        description: Boolean for whether at least one carbon opportunity for the grower meets eligibility requirements.
      is_ambiguous_eligibility:
        type: boolean
        description: Boolean indicating that some but not all opportunities with an account are eligible thus we do not know if the fields are eligible.
    source: |
      select account_id
      , is_eligible_for_carbon
      , ifnull(ambiguous_eligibility, False) as is_ambiguous_eligibility from (
         select account_id
         , booland_agg(is_eligible_for_carbon) as is_eligible_for_carbon
         , case
           when booland_agg(is_eligible_for_carbon) then False
           when boolxor_agg(is_eligible_for_carbon) and count(*) > 1 then True end as ambiguous_eligibility
       from GROWER_OPPORTUNITY_DETAIL
       group by account_id);
  - name: carbon_soil_sampling_event
    description: carbon related DCA soil sampling data
    columns:
      event_date:
        type: datetime
        description: Date of the event carbon collection event as recorded in DCA
      event_id:
        type: string
        description: event id GUID
      update_date:
        type: datetime
        description: datime an event was updated
      grower_name:
        type: string
        description: Grower Name
      grower_id:
        type: string
        description: dca grower_id
      farm_name:
        type: string
        description: Farm name
      farm_id:
        type: string
        description: DCA farm id
      field_name:
        type: string
        description: Field Name
      field_id:
        type: string
        description: DCA field id
      zone_name:
        type: string
        description: DCA Zone Name
      zone_id:
        type: string
        description: DCA zone id
      event_group:
        type: string
        description:
      event_name:
        type: string
        description: Event Name (in this case only related to Carbon template))
      fos_selected_no_issue:
        type: boolean
        description: Did the FOS select "No Issue" (explicitly choosing not to enter a soil sampling event)?
      soil_sample_location_c:
        type: string
        description: Geo location where soil sample was taken from
      actual_sample_location_lon:
        type: string
        description: Longitude of where users says they took the sample
      actual_sample_location_lat:
        type: string
        description: Latitude of where users says they took the sample
      reference_sample_location_lon:
        type: string
        description: The longitude of the prescribed sampling point
      reference_sample_location_lat:
        type: string
        description: The latitude of the prescribed sampling point
      reference_sample_location_id:
        type: string
        description: The id of the prescribed sample location
      reference_sample_location_version:
        type: string
        description: The version of the prescibed sample location
      user_record_sample_location_lon:
        type: string
        description: The longitude of the device at time of event recording
      user_record_sample_location_lat:
        type: string
        description: The latitude of the device at time of event recording
      surface_soil_frozen:
        type: boolean
        description: Is the surface of the soil frozen?
      soil_profile_frozen:
        type: boolean
        description: Is any portion of the soil profile frozen?
      carbon_soil_sample_qr_code_c:
        type: string
        description: QR code for the soil sample
      bulk_density_soil_sample_qr_code_c:
        type: string
        description: QR code for the soil sample for bulk density testing
      carbon_soil_sampling_method:
        type: string
        description: Carbon soil sampling method (eg Drill, Probe)
      bulk_density_soil_sampling_method:
        type: string
        description: Bulk Density soil sampling method (eg Core, Hole Volume)
      soil_sampling_headlands:
        type: boolean
        description: Identifies whether the sample was taken from headlands (headlands - a narrow piece of land that projects from a coastline into the sea.)
      carbon_soil_sample_depth_c:
        type: string
        description: Carbon Soil sample depth (in cm?)
      bulk_density_soil_sample_depth_c:
        type: string
        description: Bulk Density Soil sample depth (in cm?)
      unable_to_retrieve_carbon_soil_sample_c:
        type: string
        description: Explanation of why carbon soil sample had not been retrieved
      unable_to_retrieve_bulk_density_soil_sample_c:
        type: string
        description: Explanation of why bulk density soil sample had not been retrieved
      bulk_density_soil_sampling_hole_volume:
        type: string
        description: Volume of the sampling hole in Ml
      is_minimum_data_complete:
        type: string
        description: Was the minimum required data (QR code and lat/long) supplied for this soil sampling event?
      crop:
        type: string
        description: The crop the grower intends to plant in that field in the upcoming season (2020)
      new_regen_practice:
        type: string
        description: The set of new regen practices the grower intends to use on that field.
      new_regen_practice_timing:
        type: string
        description: When the new regen practice was implemented on the field.
      new_regen_practice_notes:
        type: string
        description: Open response for notes on new regenerative practices on field. USE SPARINGLY.
      tillage_method:
        type: string
        description: For soil sampling operations, what was the last tillage method used on the field?
      tillage_timing:
        type: datetime
        description: For soil sampling operations, when was the last tillage pass on the field?
      texture_ph_qr_code:
        type: string
        description: QR code scan for soil texture and pH soil sample.
      pc_adding_new_species_to_existing_cover_crop:
        type: boolean
        description: Whether adding new species to existing cover crop is a type of new regen practice on the field.
      pc_change_in_fertilizer_application_method:
        type: boolean
        description: Whether change in fertilizer application method (i.e. injection) is a type of new regen practice on the field.
      pc_change_in_fertilizer_application_timing:
        type: boolean
        description: Whether change in fertilizer application timing (i.e. fall to spring) is a type of new regen practice on the field.
      pc_change_in_fertilizer_product:
        type: boolean
        description: Whether change in fertilizer product (i.e. lower-nitrogen source, nitrogen stabilizer, organic sources) is a type of new regen practice on the field.
      pc_fertilizer_change_reduction:
        type: boolean
        description: Whether fertilizer change/reduction is a type of new regen practice on the field.
      pc_fertilizer_reduction:
        type: boolean
        description: Whether fertilizer reduction is a type of new regen practice on the field.
      pc_interseeding_cover_crop:
        type: boolean
        description: Whether interseeding cover crop is a type of new regen practice on the field.
      pc_longer_duration_of_cover_crops:
        type: boolean
        description: Whether longer duration of cover crops (between harvest and planting) is a type of new regen practice on the field.
      pc_more_crops_in_rotation:
        type: boolean
        description: Whether more crops in rotation is a type of new regen practice on the field.
      pc_new_cover_crop_adoption:
        type: boolean
        description: Whether new cover crop adoption (between harvest and planting) is a type of new regen practice on the field.
      pc_new_crops_in_rotation:
        type: boolean
        description: Whether new crops in rotation is a type of new regen practice on the field.
      pc_new_crops_in_rotation_to_reduce_fallow_periods:
        type: boolean
        description: Whether new crops in rotation to reduce fallow periods is a type of new regen practice on the field.
      pc_new_improved_livestock_integration:
        type: boolean
        description: Whether new/improved livestock integration is a type of new regen practice on the field.
      pc_new_more_livestock_integration:
        type: boolean
        description: Whether new/more livestock integration is a type of new regen practice on the field.
      pc_tillage_change_reduction:
        type: boolean
        description: Whether tillage change/reduction is a type of new regen practice on the field.
    source: |
      select 
       event_date, 
       event_id,
       update_date,
       grower_name,
       grower_id,
       farm_name,
       farm_id,
       field_name,
       field_id,
       zone_name, 
       zone_id,
       event_group,
       event_name,
       ifnull(to_boolean(parse_json(trim(form_data:data,'"')):noIssue),False)                               fos_selected_no_issue,
       parse_json(event_data_object:soil_sample_location_c)                                                 soil_sample_location_c,   
       
       soil_sample_location_c:geoJson:features[0]:geometry:coordinates[0]                                   actual_sample_location_lon,
       soil_sample_location_c:geoJson:features[0]:geometry:coordinates[1]                                   actual_sample_location_lat,
       
       soil_sample_location_c:geoJson:features[0]:properties:reference:geometry:coordinates[0]              reference_sample_location_lon,
       soil_sample_location_c:geoJson:features[0]:properties:reference:geometry:coordinates[1]              reference_sample_location_lat,
       soil_sample_location_c:geoJson:features[0]:properties:reference:properties:id                        reference_sample_location_id,
       trim(soil_sample_location_c:geoJson:features[0]:properties:reference:properties:version,'"')         reference_sample_location_version,
       
       soil_sample_location_c:geoJson:features[0]:properties:userLocation:geometry:coordinates[0]           user_record_sample_location_lon,
       soil_sample_location_c:geoJson:features[0]:properties:userLocation:geometry:coordinates[1]           user_record_sample_location_lat,       
       
       trim(event_data_object:surface_soil_frozen, '"')                                                     surface_soil_frozen,
       trim(event_data_object:soil_profile_frozen, '"')                                                     soil_profile_frozen,
       trim(event_data_object:carbon_soil_sample_qr_code_c, '"')                                            carbon_soil_sample_qr_code_c,
       trim(event_data_object:bulk_density_soil_sample_qr_code_c, '"')                                      bulk_density_soil_sample_qr_code_c,
       trim(event_data_object:carbon_soil_sampling_method[0], '"')                                          carbon_soil_sampling_method,
       trim(event_data_object:bulk_density_soil_sampling_method[0], '"')                                    bulk_density_soil_sampling_method,
       trim(event_data_object:soil_sampling_headlands, '"')                                                 soil_sampling_headlands,
       trim(event_data_object:carbon_soil_sample_depth_c, '"')                                              carbon_soil_sample_depth_c,
       trim(event_data_object:bulk_density_soil_sample_depth_c, '"')                                        bulk_density_soil_sample_depth_c,
       trim(event_data_object:unable_to_retrieve_carbon_soil_sample_c, '"')                                 unable_to_retrieve_carbon_soil_sample_c,
       trim(event_data_object:unable_to_retrieve_bulk_density_soil_sample_c, '"')                           unable_to_retrieve_bulk_density_soil_sample_c,
       trim(event_data_object:bulk_density_soil_sampling_hole_volume, '"')                                  bulk_density_soil_sampling_hole_volume,
       ( 
        ( carbon_soil_sample_qr_code_c is not null or bulk_density_soil_sample_qr_code_c is not null )
        and reference_sample_location_lon is not null 
        and reference_sample_location_lat is not null 
       )                                                                                                    is_minimum_data_complete,
       trim(event_data_object:crop[0], '"')                                                                 crop,
       parse_json(event_data_object:new_regen_practice)                                                     new_regen_practice,
       trim(event_data_object:new_regen_practice_timing[0], '"')                                            new_regen_practice_timing,
       trim(event_data_object:notes_paragraph, '"')                                                         new_regen_practice_notes,
       trim(event_data_object:tillage_method_carbon[0], '"')                                                tillage_method,
       trim(event_data_object:tillage_timing[0], '"')                                                       tillage_timing,
       trim(event_data_object:texture_ph_soil_sample_qr_code, '"')                                          texture_ph_qr_code,
       array_contains('Adding new species to existing cover crop'::variant, new_regen_practice) as pc_adding_new_species_to_existing_cover_crop,
       array_contains('Change in fertilizer application method (i.e. injection)'::variant, new_regen_practice) as pc_change_in_fertilizer_application_method,
       array_contains('Change in fertilizer application timing (i.e. fall to spring)'::variant, new_regen_practice) as pc_change_in_fertilizer_application_timing,
       array_contains('Change in fertilizer product (i.e. lower-nitrogen source, nitrogen stabilizer, organic sources)'::variant, new_regen_practice) as pc_change_in_fertilizer_product,
       array_contains('Fertilizer change/reduction'::variant, new_regen_practice) as pc_fertilizer_change_reduction,     
       array_contains('Fertilizer reduction'::variant, new_regen_practice) as pc_fertilizer_reduction,
       array_contains('Interseeding cover crop'::variant, new_regen_practice) as pc_interseeding_cover_crop,      
       array_contains('Longer duration of cover crops (between harvest and planting)'::variant, new_regen_practice) as pc_longer_duration_of_cover_crops,
       array_contains('More crops in rotation'::variant, new_regen_practice) as pc_more_crops_in_rotation,
       array_contains('New cover crop adoption (between harvest and planting)'::variant, new_regen_practice) as pc_new_cover_crop_adoption,
       array_contains('New crops in rotation'::variant, new_regen_practice) as pc_new_crops_in_rotation,
       array_contains('New crops in rotation to reduce fallow periods'::variant, new_regen_practice) as pc_new_crops_in_rotation_to_reduce_fallow_periods,      
       array_contains('New/improved livestock integration'::variant, new_regen_practice) as pc_new_improved_livestock_integration,
       array_contains('New/more livestock integration'::variant, new_regen_practice) as pc_new_more_livestock_integration,
       array_contains('Tillage change/reduction'::variant, new_regen_practice) as pc_tillage_change_reduction       
      from PARTHENON.AGRONOMY.DCA_EVENT
      where form_template_name = 'carbon'
      and grower_id not in (select id from parthenon.dca_db.dca_growers where error_status['test_account'] = true);
  - name: agronomy_practice_change_event
    description: Form in agronomist call plan that asks about intended practice changes. This will be combined with carbon soil sampling practice changes for an overall picture of practice changes.
    columns:
      field_id:
        type: string
        description: DCA field ID
      pc_adding_new_species_to_existing_cover_crop:
        type: boolean
        description: Whether adding new species to existing cover crop is a type of new regen practice on the field.
      pc_change_in_fertilizer_application_method:
        type: boolean
        description: Whether change in fertilizer application method (i.e. injection) is a type of new regen practice on the field.
      pc_change_in_fertilizer_application_timing:
        type: boolean
        description: Whether change in fertilizer application timing (i.e. fall to spring) is a type of new regen practice on the field.
      pc_change_in_fertilizer_product:
        type: boolean
        description: Whether change in fertilizer product (i.e. lower-nitrogen source, nitrogen stabilizer, organic sources) is a type of new regen practice on the field.
      pc_fertilizer_change_reduction:
        type: boolean
        description: Whether fertilizer change/reduction is a type of new regen practice on the field.
      pc_fertilizer_reduction:
        type: boolean
        description: Whether fertilizer reduction is a type of new regen practice on the field.
      pc_interseeding_cover_crop:
        type: boolean
        description: Whether interseeding cover crop is a type of new regen practice on the field.
      pc_longer_duration_of_cover_crops:
        type: boolean
        description: Whether longer duration of cover crops (between harvest and planting) is a type of new regen practice on the field.
      pc_more_crops_in_rotation:
        type: boolean
        description: Whether more crops in rotation is a type of new regen practice on the field.
      pc_new_cover_crop_adoption:
        type: boolean
        description: Whether new cover crop adoption (between harvest and planting) is a type of new regen practice on the field.
      pc_new_crops_in_rotation:
        type: boolean
        description: Whether new crops in rotation is a type of new regen practice on the field.
      pc_new_crops_in_rotation_to_reduce_fallow_periods:
        type: boolean
        description: Whether new crops in rotation to reduce fallow periods is a type of new regen practice on the field.
      pc_new_improved_livestock_integration:
        type: boolean
        description: Whether new/improved livestock integration is a type of new regen practice on the field.
      pc_new_more_livestock_integration:
        type: boolean
        description: Whether new/more livestock integration is a type of new regen practice on the field.
      pc_tillage_change_reduction:
        type: boolean
        description: Whether tillage change/reduction is a type of new regen practice on the field.
    source: |
      select field_id
      , parse_json(event_data_object:new_regen_practice) as new_regen_practice
      , array_contains('Adding new species to existing cover crop'::variant, new_regen_practice) as pc_adding_new_species_to_existing_cover_crop
      , array_contains('Change in fertilizer application method (i.e. injection)'::variant, new_regen_practice) as pc_change_in_fertilizer_application_method
      , array_contains('Change in fertilizer application timing (i.e. fall to spring)'::variant, new_regen_practice) as pc_change_in_fertilizer_application_timing
      , array_contains('Change in fertilizer product (i.e. lower-nitrogen source, nitrogen stabilizer, organic sources)'::variant, new_regen_practice) as pc_change_in_fertilizer_product
      , array_contains('Fertilizer change/reduction'::variant, new_regen_practice) as pc_fertilizer_change_reduction
      , array_contains('Fertilizer reduction'::variant, new_regen_practice) as pc_fertilizer_reduction
      , array_contains('Interseeding cover crop'::variant, new_regen_practice) as pc_interseeding_cover_crop
      , array_contains('Longer duration of cover crops (between harvest and planting)'::variant, new_regen_practice) as pc_longer_duration_of_cover_crops
      , array_contains('More crops in rotation'::variant, new_regen_practice) as pc_more_crops_in_rotation
      , array_contains('New cover crop adoption (between harvest and planting)'::variant, new_regen_practice) as pc_new_cover_crop_adoption
      , array_contains('New crops in rotation'::variant, new_regen_practice) as pc_new_crops_in_rotation
      , array_contains('New crops in rotation to reduce fallow periods'::variant, new_regen_practice) as pc_new_crops_in_rotation_to_reduce_fallow_periods
      , array_contains('New/improved livestock integration'::variant, new_regen_practice) as pc_new_improved_livestock_integration
      , array_contains('New/more livestock integration'::variant, new_regen_practice) as pc_new_more_livestock_integration
      , array_contains('Tillage change/reduction'::variant, new_regen_practice) as pc_tillage_change_reduction
      , array_contains('Use of cover crops'::variant, new_regen_practice) as pc_use_of_cover_crops
      , array_contains('Reduced inputs'::variant, new_regen_practice) as pc_reduced_inputs
      from PARTHENON.AGRONOMY.DCA_EVENT
      where event_name = 'short_term_plan'
      and grower_name != 'Apple Grower'
      and new_regen_practice is not null and parse_json(new_regen_practice) != '["None"]';
  - name: practice_change
    description: A summary view of field level indications of practice change for carbon.
    columns:
      dca_field_id:
        type: string
        description: DCA field id. Joins to dca_field_id in parthenon.agronomy.dca_grower_farm_field views.
      has_practice_change:
        type: boolean
        description: Whether the field has a practice change indicated in the carbon soil sampling or agronomy call plan.
      pc_adding_new_species_to_existing_cover_crop:
        type: boolean
        description: Whether adding new species to existing cover crop is a type of new regen practice on the field.
      pc_change_in_fertilizer_application_method:
        type: boolean
        description: Whether change in fertilizer application method (i.e. injection) is a type of new regen practice on the field.
      pc_change_in_fertilizer_application_timing:
        type: boolean
        description: Whether change in fertilizer application timing (i.e. fall to spring) is a type of new regen practice on the field.
      pc_change_in_fertilizer_product:
        type: boolean
        description: Whether change in fertilizer product (i.e. lower-nitrogen source, nitrogen stabilizer, organic sources) is a type of new regen practice on the field.
      pc_fertilizer_change_reduction:
        type: boolean
        description: Whether fertilizer change/reduction is a type of new regen practice on the field.
      pc_fertilizer_reduction:
        type: boolean
        description: Whether fertilizer reduction is a type of new regen practice on the field.
      pc_interseeding_cover_crop:
        type: boolean
        description: Whether interseeding cover crop is a type of new regen practice on the field.
      pc_longer_duration_of_cover_crops:
        type: boolean
        description: Whether longer duration of cover crops (between harvest and planting) is a type of new regen practice on the field.
      pc_more_crops_in_rotation:
        type: boolean
        description: Whether more crops in rotation is a type of new regen practice on the field.
      pc_new_cover_crop_adoption:
        type: boolean
        description: Whether new cover crop adoption (between harvest and planting) is a type of new regen practice on the field.
      pc_new_crops_in_rotation:
        type: boolean
        description: Whether new crops in rotation is a type of new regen practice on the field.
      pc_new_crops_in_rotation_to_reduce_fallow_periods:
        type: boolean
        description: Whether new crops in rotation to reduce fallow periods is a type of new regen practice on the field.
      pc_new_improved_livestock_integration:
        type: boolean
        description: Whether new/improved livestock integration is a type of new regen practice on the field.
      pc_new_more_livestock_integration:
        type: boolean
        description: Whether new/more livestock integration is a type of new regen practice on the field.
      pc_tillage_change_reduction:
        type: boolean
        description: Whether tillage change/reduction is a type of new regen practice on the field.
    source: |
      with CARBON_PRACTICE_CHANGE_CTE as (
        select field_id
        , pc_adding_new_species_to_existing_cover_crop
        , pc_change_in_fertilizer_application_method
        , pc_change_in_fertilizer_application_timing
        , pc_change_in_fertilizer_product
        , pc_fertilizer_change_reduction
        , pc_fertilizer_reduction
        , pc_interseeding_cover_crop
        , pc_longer_duration_of_cover_crops
        , pc_more_crops_in_rotation
        , pc_new_cover_crop_adoption
        , pc_new_crops_in_rotation
        , pc_new_crops_in_rotation_to_reduce_fallow_periods
        , pc_new_improved_livestock_integration
        , pc_new_more_livestock_integration
        , pc_tillage_change_reduction
        , NULL as pc_use_of_cover_crops
        , NULL as pc_reduced_inputs
        from CARBON_SOIL_SAMPLING_EVENT
        where new_regen_practice is not null and parse_json(new_regen_practice) != '["None"]'
      ), PRACTICE_CHANGE_UNION as (
        select *
          from CARBON_PRACTICE_CHANGE_CTE
        union
        select field_id
          , pc_adding_new_species_to_existing_cover_crop
          , pc_change_in_fertilizer_application_method
          , pc_change_in_fertilizer_application_timing
          , pc_change_in_fertilizer_product
          , pc_fertilizer_change_reduction
          , pc_fertilizer_reduction
          , pc_interseeding_cover_crop
          , pc_longer_duration_of_cover_crops
          , pc_more_crops_in_rotation
          , pc_new_cover_crop_adoption
          , pc_new_crops_in_rotation
          , pc_new_crops_in_rotation_to_reduce_fallow_periods
          , pc_new_improved_livestock_integration
          , pc_new_more_livestock_integration
          , pc_tillage_change_reduction
          , pc_use_of_cover_crops
          , pc_reduced_inputs
          from AGRONOMY_PRACTICE_CHANGE_EVENT
      ), PRACTICE_CHANGE_SUMMARY as (
          select field_id
          , boolor_agg(pc_adding_new_species_to_existing_cover_crop) as pc_adding_new_species_to_existing_cover_crop
          , boolor_agg(pc_change_in_fertilizer_application_method) as pc_change_in_fertilizer_application_method
          , boolor_agg(pc_change_in_fertilizer_application_timing) as pc_change_in_fertilizer_application_timing
          , boolor_agg(pc_change_in_fertilizer_product) as pc_change_in_fertilizer_product
          , boolor_agg(pc_fertilizer_change_reduction) as pc_fertilizer_change_reduction
          , boolor_agg(pc_fertilizer_reduction) as pc_fertilizer_reduction
          , boolor_agg(pc_interseeding_cover_crop) as pc_interseeding_cover_crop
          , boolor_agg(pc_longer_duration_of_cover_crops) as pc_longer_duration_of_cover_crops
          , boolor_agg(pc_more_crops_in_rotation) as pc_more_crops_in_rotation
          , boolor_agg(pc_new_cover_crop_adoption) as pc_new_cover_crop_adoption
          , boolor_agg(pc_new_crops_in_rotation) as pc_new_crops_in_rotation
          , boolor_agg(pc_new_crops_in_rotation_to_reduce_fallow_periods) as pc_new_crops_in_rotation_to_reduce_fallow_periods
          , boolor_agg(pc_new_improved_livestock_integration) as pc_new_improved_livestock_integration
          , boolor_agg(pc_new_more_livestock_integration) as pc_new_more_livestock_integration
          , boolor_agg(pc_tillage_change_reduction) as pc_tillage_change_reduction
          , boolor_agg(pc_use_of_cover_crops) as pc_use_of_cover_crops
          , boolor_agg(pc_reduced_inputs) as pc_reduced_inputs
          from PRACTICE_CHANGE_UNION
          group by field_id
      )
      select gff.dca_field_id
          , practice_change.field_id is not null as has_practice_change
          , practice_change.pc_adding_new_species_to_existing_cover_crop
          , practice_change.pc_change_in_fertilizer_application_method
          , practice_change.pc_change_in_fertilizer_application_timing
          , practice_change.pc_change_in_fertilizer_product
          , practice_change.pc_fertilizer_change_reduction
          , practice_change.pc_fertilizer_reduction
          , practice_change.pc_interseeding_cover_crop
          , practice_change.pc_longer_duration_of_cover_crops
          , practice_change.pc_more_crops_in_rotation
          , practice_change.pc_new_cover_crop_adoption
          , practice_change.pc_new_crops_in_rotation
          , practice_change.pc_new_crops_in_rotation_to_reduce_fallow_periods
          , practice_change.pc_new_improved_livestock_integration
          , practice_change.pc_new_more_livestock_integration
          , practice_change.pc_tillage_change_reduction
          , practice_change.pc_use_of_cover_crops
          , practice_change.pc_reduced_inputs
          from parthenon.agronomy.dca_grower_farm_field gff
          left join PRACTICE_CHANGE_SUMMARY practice_change
          on gff.dca_field_id = practice_change.field_id;
  - name: field
    description: Fields enrolled in the Carbon program. Primary field is DCA. Grower data is from Salesforce views in carbon schema.
    columns:
      field_name:
        type: string
        description: Name of the field.
      field_id:
        type: string
        description: DCA ID of the field
      field_status:
        type: string
        description: Status of the field.  Expected to be one of NOT_REVIEWED, OPS_READY, or DS_READY
      field_source:
        type: string
        description: Source for the field information in DCA
      boundary_id:
        type: string
        description: DCA ID of the field boundary
      polygon:
        type: string
        description: WKT of the field boundary
      acreage:
        type: float
        description: acreage of the polygon
      grower_name:
        type: string
        description: Grower name
      account_id:
        type: string
        description: Salesforce account ID
      grower_id:
        type: string
        description: DCA ID of grower
      grower_source:
        type: string
        description: Source of the grower information in DCA
      farm_name:
        type: string
        description: Name of the farm containing the field
      farm_id:
        type: string
        description: DCA ID of the farm containing the field
      farm_source:
        type: string
        description: Source of the farm information in DCA
      land_type:
        type: string
        description: Land type tag (cropland or pastureland)
      is_eligible_for_carbon:
        type: boolean
        description: Boolean for whether at least one carbon opportunity for the grower meets eligibility requirements.
      is_ambiguous_eligibility:
        type: boolean
        description: Boolean indicating that some but not all opportunities with an account are eligible thus we do not know if the fields are eligible.
      is_carbon:
        type: boolean
        description: Is True if the field id is in the IFW Fields API. This indicates the field is directly associated with a carbon contracts.
      is_carbon_candidate:
        type: boolean
        description: The field is tagged as carbon but might not yet be associated with a carbon contract in IFW. We expect these fields to graduate to is_carbon = True.
      state:
        type: string
        description: State the field is in according to Atlas API. Only certain states are eligible for carbon. Is NULL if boundary QA hasn't been run for the field yet or the field isn't in a state.
      state_eligible_for_carbon:
        type: boolean
        description: Boolean for state eligibility. Only fields in eligible states move to qualified_field. If state is NULL, this will also be NULL.
      has_practice_change:
        type: boolean
        description: Whether the field has a practice change indicated in the carbon soil sampling or agronomy call plan. Practice change is based on agrononmy.dca_gff and thus inner joins to carbon.field.
    source: |
      select gff.field_name
      , gff.dca_field_id as field_id
      , gff.boundary_review_status as field_status
      , gff.field_source
      , gff.dca_boundary_id as boundary_id
      , gff.field_wkt as polygon
      , gff.field_acreage as acreage
      , gff.grower_name
      , gff.salesforce_acct_id as account_id
      , gff.dca_grower_id as grower_id
      , gff.dca_grower_source as grower_source
      , gff.farm_name
      , gff.dca_farm_id as farm_id
      , gff.dca_farm_source as farm_source
      , gff.land_type 
      , grower.is_eligible_for_carbon
      , grower.is_ambiguous_eligibility
      , field_programs.is_carbon
      , field_programs.is_carbon_candidate
      , qa.state
      , states.state_eligible_for_carbon
      , practice_change.has_practice_change
      from parthenon.agronomy.dca_grower_farm_field gff 
      join parthenon.agronomy.field_programs field_programs
      on gff.dca_field_id = field_programs.dca_field_id
      left join parthenon.boundary_qa.field qa
      on gff.dca_field_id = qa.id
      left join STATES
      on qa.state = states.state      
      left join GROWER grower
      on gff.salesforce_acct_id = grower.account_id
      join PRACTICE_CHANGE practice_change
      on gff.dca_field_id = practice_change.dca_field_id
      where field_programs.is_carbon = True or field_programs.is_carbon_candidate = True;
  - name: qualified_field
    description: Fields enrolled in *and qualified for* the Carbon program.  Primary source is DCA. Qualification information will be updated as program evolves.
    columns:
      field_name:
        type: string
        description: Name of the field.
      field_id:
        type: string
        description: DCA ID of the field
      field_status:
        type: string
        description: Status of the field.  Expected to be one of NOT_REVIEWED, OPS_READY, or DS_READY
      field_source:
        type: string
        description: Source for the field information in DCA
      boundary_id:
        type: string
        description: DCA ID of the field boundary
      polygon:
        type: string
        description: WKT of the field boundary
      acreage:
        type: float
        description: acreage of the polygon.
      land_type:
        type: string
        description: Land type tag (cropland or pastureland)
      grower_name:
        type: string
        description: Grower name
      account_id:
        type: string
        description: Salesforce account ID
      grower_id:
        type: string
        description: DCA ID of grower
      grower_source:
        type: string
        description: Source of the grower information in DCA
      farm_name:
        type: string
        description: Name of the farm containing the field
      farm_id:
        type: string
        description: DCA ID of the farm containing the field
      farm_source:
        type: string
        description: Source of the farm information in DCA.
      state:
        type: string
        description: State the field is in according to Atlas API. Only certain states are eligible for carbon.
    source: |
      select field_name
        , field_id
        , field_status
        , field_source
        , boundary_id
        , polygon
        , acreage
        , land_type
        , grower_name
        , account_id
        , grower_id
        , grower_source
        , farm_name
        , farm_id
        , farm_source
        , state
      from FIELD
      where state_eligible_for_carbon = True;
  - name: compiled_soil_sample_qr_codes_qr_code_list
    description: Terraton Soil Sample QR codes
    columns:
      date:
        type: string
        description: Date
      depth:
        type: string
        description: Depth
      field_name:
        type: string
        description: Field name
      qr_code:
        type: string
        description: QR code
      quantity:
        type: string
        description: Quantity
      sample_type:
        type: datetime
        description: Sample type
      site:
        type: float
        description: Site
      _sdc_batched_at:
        type: string
        description: SDC batched at date
      _sdc_extracted_at:
        type: string
        description: SDC extracted at date
      _sdc_received_at:
        type: string
        description: SDC received at date
      _sdc_sequence:
        type: string
        description: SDC sequence
      _sdc_table_version:
        type: string
        description: SDC table version
      __sdc_primary_key:
        type: string
        description: SDC primary key
    source: |
      select date
      , depth
      , field_name
      , qr_code
      , quantity
      , sample_type
      , site
      , _sdc_batched_at
      , _sdc_extracted_at
      , _sdc_received_at
      , _sdc_sequence
      , _sdc_table_version
      , __sdc_primary_key
      from STITCH.MISC_GSHEETS.COMPILED_SOIL_SAMPLE_QR_CODES_QR_CODE_LIST;
  - name: carbon_soil_sampling_qr_codes
    description: QR code view of soil sampling events
    columns:
      event_date:
        type: datetime
        description: Date soil sampling event was recorded
      event_id:
        type: string
        description: Soil sampling event id
      grower_name:
        type: string
        description: Name of grower
      grower_id:
        type: string
        description: Grower id
      farm_name:
        type: string
        description: Farm name
      field_name:
        type: string
        description: Field name
      field_id:
        type: string
        description: Field id
      zone_name:
        type: string
        description: Zone name
      zone_id:
        type: string
        description: Zone id
      event_group:
        type: string
        description: Event group from IFM
      event_name:
        type: string
        description: Event name from IFM
      sample_type:
        type: string
        description: Type of soil sample (carbon or bulk density)
      soil_sample_location_c:
        type: string
        description: json of sampling points
      actual_sample_location_lon:
        type: string
        description: Actual sample location longitude
      actual_sample_location_lat:
        type: string
        description: Actual sample location longitude
      reference_sample_location_lon:
        type: string
        description: Sample point longitude
      reference_sample_location_lat:
        type: string
        description: Sample point latitude
      reference_sample_location_version:
        type: string
        description: Date
      user_record_sample_location_lon:
        type: string
        description: Device longitude at sampling
      user_record_sample_location_lat:
        type: string
        description: Device latitude at sampling
      surface_soil_frozen:
        type: boolean
        description: Is the surface of the soil frozen?
      soil_profile_frozen:
        type: boolean
        description: Is any portion of the soil profile frozen?
      qr_code:
        type: string
        description: QR code of sample and view key
      sampling_method:
        type: string
        description: Means of drawing sample
      sampling_depth:
        type: float
        description: Depth of sample
      soil_sampling_headlands:
        type: string
        description: Was the soil sample drawn from headlands?
      soil_sampling_hole_volume:
        type: float
        description: Volume of sampling hole
      unable_to_retrieve_sample:
        type: string
        description: Text of reason of why unable to draw sample from that location
      user_id:
        type: string
        description: IFM user that completed the form
      carbon_sample:
        type: boolean
        description: Boolean if carbon sample
      bulk_density_sample:
        type: boolean
        description: Boolean if bulk density sample
      texture_ph_sample:
        type: boolean
        description: Boolean if Texture/PH sample
      test_required:
        type: string
        description: Test required for the sample
    source: |
      with carbon_data as (
          select event_date
              , event_id
              , grower_name
              , grower_id
              , farm_name
              , field_name
              , field_id
              , zone_name
              , zone_id
              , event_group
              , event_name
              , 'carbon' as sample_type
              , soil_sample_location_c
              , actual_sample_location_lon
              , actual_sample_location_lat
              , reference_sample_location_lon
              , reference_sample_location_lat
              , reference_sample_location_version
              , user_record_sample_location_lon
              , user_record_sample_location_lat
              , soil_profile_frozen
              , surface_soil_frozen
              , carbon_soil_sample_qr_code_c as qr_code
              , carbon_soil_sampling_method as sampling_method
              , carbon_soil_sample_depth_c as sampling_depth
              , soil_sampling_headlands
              , NULL as soil_sampling_hole_volume
              , unable_to_retrieve_carbon_soil_sample_c as unable_to_retrieve_sample
              , u.user_id
              , carbon_soil_sample_qr_code_c is not null and length(carbon_soil_sample_qr_code_c) != 0 as carbon_sample
              , bulk_density_soil_sample_qr_code_c is not null and length(bulk_density_soil_sample_qr_code_c) != 0 as bulk_density_sample
              , texture_ph_qr_code is not null and length(texture_ph_qr_code) != 0 as texture_ph_sample
              , case
                  when carbon_sample = True and bulk_density_sample = False then 'MIR'
                  when carbon_sample = True and bulk_density_sample = True then 'MIR and dry combustion'
                  else 'QR error - investigate' end as test_required
            from carbon_soil_sampling_event csse
            join parthenon.dca_db.dca_form_group_form_submissions fgfs on fgfs.id = csse.event_id
            join parthenon.dca_db.dca_user_profiles u on u.id = fgfs.created_by_id
            where carbon_soil_sample_qr_code_c is not null
      ), bulk_density_data as (
          select event_date
              , event_id
              , grower_name
              , grower_id
              , farm_name
              , field_name
              , field_id
              , zone_name
              , zone_id
              , event_group
              , event_name
              , 'bulk_density' as sample_type
              , soil_sample_location_c
              , actual_sample_location_lon
              , actual_sample_location_lat
              , reference_sample_location_lon
              , reference_sample_location_lat
              , reference_sample_location_version
              , user_record_sample_location_lon
              , user_record_sample_location_lat
              , soil_profile_frozen
              , surface_soil_frozen
              , bulk_density_soil_sample_qr_code_c as qr_code
              , bulk_density_soil_sampling_method as sampling_method
              , bulk_density_soil_sample_depth_c as sampling_depth
              , NULL as soil_sampling_headlands
              , bulk_density_soil_sampling_hole_volume as soil_sampling_hole_volume
              , unable_to_retrieve_carbon_soil_sample_c as unable_to_retrieve_sample
              , u.user_id
              , carbon_soil_sample_qr_code_c is not null and length(carbon_soil_sample_qr_code_c) != 0 as carbon_sample
              , bulk_density_soil_sample_qr_code_c is not null and length(bulk_density_soil_sample_qr_code_c) != 0 as bulk_density_sample
              , texture_ph_qr_code is not null and length(texture_ph_qr_code) != 0 as texture_ph_sample
              , 'bulk_density' as test_required
            from carbon_soil_sampling_event csse
            join parthenon.dca_db.dca_form_group_form_submissions fgfs on fgfs.id = csse.event_id
            join parthenon.dca_db.dca_user_profiles u on u.id = fgfs.created_by_id
            where bulk_density_soil_sample_qr_code_c is not null
      ),texture_ph_data as (
          select event_date
              , event_id
              , grower_name
              , grower_id
              , farm_name
              , field_name
              , field_id
              , zone_name
              , zone_id
              , event_group
              , event_name
              , 'texture/ph' as sample_type
              , soil_sample_location_c
              , actual_sample_location_lon
              , actual_sample_location_lat
              , reference_sample_location_lon
              , reference_sample_location_lat
              , reference_sample_location_version
              , user_record_sample_location_lon
              , user_record_sample_location_lat
              , NULL as soil_profile_frozen
              , NULL as surface_soil_frozen
              , texture_ph_qr_code as qr_code
              , NULL as sampling_method
              , NULL as sampling_depth
              , NULL as soil_sampling_headlands
              , NULL as soil_sampling_hole_volume
              , NULL as unable_to_retrieve_sample
              , u.user_id
              , carbon_soil_sample_qr_code_c is not null and length(carbon_soil_sample_qr_code_c) != 0 as carbon_sample
              , bulk_density_soil_sample_qr_code_c is not null and length(bulk_density_soil_sample_qr_code_c) != 0 as bulk_density_sample
              , texture_ph_qr_code is not null and length(texture_ph_qr_code) != 0 as texture_ph_sample
              , 'texture/ph' as test_required
            from carbon_soil_sampling_event csse
            join parthenon.dca_db.dca_form_group_form_submissions fgfs on fgfs.id = csse.event_id
            join parthenon.dca_db.dca_user_profiles u on u.id = fgfs.created_by_id
            where texture_ph_qr_code is not null
      )
      select * from carbon_data
      union
      select * from bulk_density_data
      union 
      select * from texture_ph_data;
  - name: test_opportunities_unique
    description: tests that opportunities in GROWER_OPPORTUNITY_DETAIL are unique
    hidden: yes
    columns:
      unique_opportunities:
        type: boolean
        description: Boolean if opportunity IDs are unique in GROWER_OPPORTUNITY_DETAIL.
    source: |
      select count(opportunity_id) = count(distinct opportunity_id) as unique_opportunities
        from GROWER_OPPORTUNITY_DETAIL;
  - name: test_all_contracts_unique
    description: Tests that contract numbers are unique in contract history
    hidden: yes
    columns:
      contracts_unique:
        type: boolean
        description: Checks that contract numbers unique in ALL_CONTRACTS
    source: |
      select count(contract_number) = count(distinct contract_number) as contracts_unique
        from ALL_CONTRACTS;
  - name: test_contract_unique
    description: Tests that contract numbers are unique in contract history
    hidden: yes
    columns:
      contracts_unique:
        type: boolean
        description: Checks that contract numbers unique in CONTRACT
    source: |
      select count(contract_number) = count(distinct contract_number) as contracts_unique
        from ALL_CONTRACTS;
  - name: test_carbon_field_id_unique
    description: Testing that dca_field_id is unique in FIELD
    hidden: yes
    columns:
      field_id_check:
        type: boolean
        description: Checks that field ids are unique.
    source: |
      select count(field_id) = count(distinct field_id) as field_id_check
        from FIELD;
  - name: test_carbon_qualified_field_id_unique
    description: Testing that dca_field_id is unique in QUALIFIED_FIELD.
    hidden: yes
    columns:
      field_id_check:
        type: boolean
        description: Qualified field ids are unique.
    source: |
      select count(field_id) = count(distinct field_id) as field_id_check
        from QUALIFIED_FIELD;
  - name: agreement_fields
    description: Agreement fields for DCA Fields.
    columns:
      agreement_id:
        type: integer
        description: Agreement ID
      created_dt:
        type: timestamp_tz
        description: Created date
      field_boundary_id:
        type: string
        description: Field boundary ID
      field_boundary_version:
        type: string
        description: Field boundary version
      field_id:
        type: string
        description: Field ID
      field_version:
        type: string
        description: Field version
      id:
        type: integer
        description: Primary key for table, indicating unique instance of field and agreement
      updated_dt:
        type: timestamp_tz
        description: Updated date
      _fivetran_deleted:
        type: boolean
        description: Indicator that this record was hard-deleted in the source system
      _fivetran_synced:
        type: timestamp_tz
        description: Fivetran synced date
    source: |
      select agreement_id,
        created_dt,
        field_boundary_id,
        field_boundary_version,
        field_id,
        field_version, id,
        updated_dt,
        _fivetran_deleted,
        _fivetran_synced
      from FIVETRAN.AGREEMENTS_API_PUBLIC.AGREEMENT_FIELDS
      where (field_id, id) in (
        select field_id,
          max(id)
        from FIVETRAN.AGREEMENTS_API_PUBLIC.AGREEMENT_FIELDS
        group by field_id
      );
  - name: agreements
    description: Agreements for DCA Fields.
    columns:
      account_id:
        type: string
        description: Account ID
      acres:
        type: float
        description: Acres
      amends_id:
        type: integer
        description: Amends ID
      created_by_user_id:
        type: string
        description: Created by user ID
      created_dt:
        type: timestamp_tz
        description: Created date
      effective_dt:
        type: datetime
        description: Effective date
      grower_email:
        type: string
        description: Grower email
      grower_mobile_number:
        type: string
        description: Grower mobile number
      grower_name:
        type: string
        description: Grower name
      id:
        type: integer
        description: Primary key for table, indicating unique instance of agreement
      is_draft:
        type: boolean
        description: Is draft
      legal_entity_address:
        type: string
        description: Legal entity address
      legal_entity_name:
        type: string
        description: Legal entity name
      legal_entity_type:
        type: string
        description: Legal entity type
      salesforce_account_id:
        type: string
        description: Salesforce account ID
      salesforce_contract_id:
        type: string
        description: Salesforce contract ID
      salesforce_document_id:
        type: string
        description: Salesforce document ID
      salesforce_opportunity_id:
        type: string
        description: Salesforce opportunity ID
      salesforce_sync_status:
        type: string
        description: Salesforce sync status
      template_version:
        type: string
        description: Template version
      updated_dt:
        type: timestamp_tz
        description: Updated date
      _fivetran_deleted:
        type: boolean
        description: Indicator that this record was hard-deleted in the source system
      _fivetran_synced:
        type: timestamp_tz
        description: Fivetran synced date
    source: |
      select account_id,
        acres,
        amends_id,
        created_by_user_id,
        created_dt,
        effective_dt,
        grower_email,
        grower_mobile_number,
        grower_name,
        id,
        is_draft,
        legal_entity_address,
        legal_entity_name,
        legal_entity_type,
        salesforce_account_id,
        salesforce_contract_id,
        salesforce_document_id,
        salesforce_opportunity_id,
        salesforce_sync_status,
        template_version,
        updated_dt,
        _fivetran_deleted,
        _fivetran_synced
      from fivetran.agreements_api_public.agreements;
  - name: agreement_signatures
    description: Agreements signatures for DCA Fields.
    columns:
      agreement_id:
        type: integer
        description: Agreement ID
      created_dt:
        type: timestamp_tz
        description: Created date
      updated_dt:
        type: timestamp_tz
        description: Updated date
      first_name:
        type: string
        description: First Name
      last_name:
        type: string
        description: Last Name
      title:
        type: string
        description: Title
      _fivetran_deleted:
        type: boolean
        description: Indicator that this record was hard-deleted in the source system
      _fivetran_synced:
        type: timestamp_tz
        description: Fivetran synced date
    source: |
      select agreement_id,
        created_dt,
        updated_dt,
        first_name,
        last_name,
        title,
        _fivetran_deleted,
        _fivetran_synced
      from fivetran.agreements_api_public.agreement_signatures;
  - name: sfdc_work_order
    description: carbon work order from Salesforce
    columns:
      wo_id:
        type: string
        description: Work Order ID
      account_id:
        type: string
        description: Salesforce account ID
      salesforce_name:
        type: string
        description: Salesforce account name
      opportunity_id:
        type: string
        description: Salesforce opportunity ID
      wo_created_date:
        type: timestamp_tz
        description: Date work order was created
      wo_last_modified_date:
        type: timestamp_tz
        description: Last date work order was modified
      wo_created_by:
        type: string
        description: Who created the work order
      work_type:
        type: string
        description: Work type inside the work order, e.g. soil sampling, data collection, etc.
      acres_selected:
        type: float
        description: Acres selected in the work order
      availability_notes:
        type: string
        description: Availability notes in the work order
      street:
        type: string
        description: Street as part of address in work order
      city:
        type: string
        description: City as part of address in the work order
      state:
        type: string
        description: State as part of address in the work order
      postal_code:
        type: string
        description: Postal code as part of address in the work order
      duration_in_minutes:
        type: float
        description: Duration specified in the work order
      fos_note:
        type: string
        description: Note was left by FOS
      is_closed:
        type: boolean
        description: Whether the work order was closed
      is_stopped:
        type: boolean
        description: Whether the work order was stopped
      priority:
        type: string
        description: Priority of the work order
      appointment_number:
        type: string
        description: Service appointment number tied to the work order
      appointment_due_date:
        type: timestamp_tz
        description: Due date of service appointment
      appointment_created_date:
        type: timestamp_tz
        description: Date service appointment was created
      appointment_last_modified_date:
        type: timestamp_tz
        description: Last date service appointment was modified
      appointment_scheduled_start_date:
        type: timestamp_tz
        description: Date service appointment was scheduled to start
      appointment_scheduled_end_date:
        type: timestamp_tz
        description: Date service appointment was scheduled to end
      appointment_status:
        type: string
        description: status of service appointment
    source: |
      select wo.id as wo_id
        , wo.account_id
        , le.salesforce_name
        , wo.opportunity_c as opportunity_id
        , wo.created_date as wo_created_date
        , wo.last_modified_date as wo_last_modified_date
        , u.name as wo_created_by
        , wt.name as work_type
        , wo.acres_selected_for_wo_c as acres_selected
        , wo.availability_notes_c as availability_notes
        , wo.street
        , wo.city
        , wo.state
        , wo.postal_code
        , wo.duration_in_minutes
        , wo.fos_notes_c as fos_note
        , wo.is_closed
        , wo.is_stopped
        , wo.priority
        , sa.appointment_number
        , sa.due_date as appointment_due_date
        , sa.created_date as appointment_created_date
        , sa.last_modified_date as appointment_last_modified_date
        , sa.sched_start_time as appointment_scheduled_start_date
        , sa.sched_end_time as appointment_scheduled_end_date
        , sa.status as appointment_status
      from parthenon.salesforce_v2.work_order wo
      left join parthenon.salesforce_v2.work_type wt
      on wo.work_type_id = wt.id
      join parthenon.salesforce_v2.user u
      on wo.created_by_id = u.id
      join parthenon.accounts.legal_entity le
      on wo.account_id = le.id
      join parthenon.salesforce_v2.service_appointment sa
      on wo.root_work_order_id = sa.parent_record_id
      join parthenon.salesforce_v2.record_type r
      on wo.record_type_id = r.id
      where r.name = 'Carbon'
        and wo.is_deleted = false;
  - name: terraton_experiment_sampling_event
    description: soil carbon and bulk density sampling, research site sampling and sample shipping events in terraton_experiment call plan
    columns:
      event_date:
        type: timestamp_tz
        description: date of the event in Terraton Experiment as recorded in DCA
      event_id:
        type: string
        description: event id GUID
      update_date:
        type: timestamp_tz
        description: date an event was updated
      grower_name:
        type: string
        description: grower name
      grower_id:
        type: string
        description: DCA grower id
      farm_name:
        type: string
        description: farm name
      farm_id:
        type: string
        description: DCA farm id
      field_name:
        type: string
        description: field name
      field_id:
        type: string
        description: DCA field id
      zone_name:
        type: string
        description: DCA zone name
      zone_id:
        type: string
        description: DCA zone id
      event_group:
        type: string
        description: IFM form group name in Terraton Experiment
      event_name:
        type: string
        description: IFM form name in Terraton Experiment
      entered_by_name:
        type: string
        description: User who create the form
      updated_by_name:
        type: string
        description: User who updated the form
      none_submitted:
        type: boolean
        description: None was selected on the form (explicitly choosing not to enter a event)
      sample_geo_location:
        type: string
        description: Geo location where soil sample was taken from
      barrier_to_sample_at_prescribed_site:
        type: string
        description: Barrier to sample at prescribed site
      soil_sampling_headlands:
        type: boolean
        description: Was this sample pulled on the headlands?
      carbon_sample_number:
        type: integer
        description: Carbon sample number - core number
      carbon_sample_location:
        type: string
        description: Carbon sample location. e.g. in-row, inter-row, unknown
      carbon_soil_sampling_method:
        type: string
        description: Carbon soil sampling method. e.g. drill, probe
      carbon_0_15_cm_qr_code:
        type: string
        description: Carbon 0-15cm QR code
      unable_to_sample_carbon_0_15_cm:
        type: string
        description: Reason why unable to sample 0-15cm carbon soil sample
      carbon_15_30_cm_qr_code:
        type: string
        description: Carbon 15-30cm QR code
      surface_soil_unable_to_sample_carbon_15_30_cmfrozen:
        type: string
        description: Reason why unable to sample 15-30cm carbon soil sample
      red_sticker_added_to_both_soil_carbon_depths:
        type: boolean
        description: Red sticker added to both soil carbon depth? Only for carbon samples taken at BD sites
      bulk_density_sample_number:
        type: integer
        description: Bulk Density sample number - core number
      bulk_density_sample_location:
        type: string
        description: Bulk Density sample location. e.g. in-row, inter-row, unknown
      bulk_density_0_15_cm_qr_code:
        type: string
        description: Bulk Density 0-15cm QR code
      bulk_density_depth_reached_cm_for_0_15_cm_core:
        type: float
        description: Bulk Density depth reached for 0-15cm core in cm
      unable_to_sample_bulk_density_0_15_cm:
        type: string
        description: Reason why unable to sample 0-15cm Bulk Density
      bulk_density_15_30_cm_qr_code:
        type: string
        description: Bulk Density 15-30cm QR code
      bulk_density_depth_reached_cm_for_15_30_cm_core:
        type: float
        description: Bulk Density depth reached for 15-30cm core in cm
      unable_to_sample_bulk_density_15_30_cm:
        type: string
        description: Reason why unable to sample 15-30cm Bulk Density
      research_site_number:
        type: integer
        description: Research site number - core number
      western_core_sample_location:
        type: string
        description: Western 1 meter core sample location. e.g. in-row, inter-row, unknown
      west_1m_core_qr_code:
        type: string
        description: West 1m core qr code
      locator_serial_number_3m_west_core_1m:
        type: string
        description: 3M locator serial number - west 1m core
      western_1_meter_core_depth:
        type: float
        description: Wester 1m core hole depth in cm
      unable_to_sample_west_1m_core:
        type: string
        description: Reason why unable to sample west 1m core
      eastern_core_sample_location:
        type: string
        description: Eastern 1 meter core sample location. e.g. in-row, inter-row, unknown
      east_1m_core_qr_code:
        type: string
        description: East 1m core qr code
      locator_serial_number_3m_east_core_1m:
        type: string
        description: 3M locator serial number - east 1m core
      eastern_1_meter_core_depth:
        type: float
        description: Eastern 1m core hole depth in cm
      unable_to_sample_east_1m_core:
        type: string
        description: Reason why unable to sample east 1m core
      haney_wet_aggregate_stability_qr_code:
        type: string
        description: Haney and Wet Aggregate Stability QR code
      microbrial_1_qr_code:
        type: string
        description: Microbial 1 QR code
      microbial_1_sample_location:
        type: string
        description: Microbial 1 sample location. e.g.in-row, inter-row, unknown
      microbrial_2_qr_code:
        type: string
        description: Microbial 2 QR code
      microbial_2_sample_location:
        type: string
        description: Microbial 2 sample location. e.g.in-row, inter-row, unknown
      microbrial_3_qr_code:
        type: string
        description: Microbial 3 QR code
      microbial_3_sample_location:
        type: string
        description: Microbial 3 sample location. e.g.in-row, inter-row, unknown
      microbrial_4_qr_code:
        type: string
        description: Microbial 4 QR code
      microbial_4_sample_location:
        type: string
        description: Microbial 4 sample location. e.g.in-row, inter-row, unknown
      microbrial_5_qr_code:
        type: string
        description: Microbial 5 QR code
      microbial_5_sample_location:
        type: string
        description: Microbial 5 sample location. e.g.in-row, inter-row, unknown
      microbrial_6_qr_code:
        type: string
        description: Microbial 6 QR code
      microbial_6_sample_location:
        type: string
        description: Microbial 6 sample location. e.g.in-row, inter-row, unknown
      microbrial_7_qr_code:
        type: string
        description: Microbial 7 QR code
      microbial_7_sample_location:
        type: string
        description: Microbial 7 sample location. e.g.in-row, inter-row, unknown
      microbrial_8_qr_code:
        type: string
        description: Microbial 8 QR code
      microbial_8_sample_location:
        type: string
        description: Microbial 8 sample location. e.g.in-row, inter-row, unknown
      microbrial_9_qr_code:
        type: string
        description: Microbial 9 QR code
      microbial_9_sample_location:
        type: string
        description: Microbial 9 sample location. e.g.in-row, inter-row, unknown
      carbon_shipment_tracking_number_t:
        type: string
        description: Carbon shipment tracking number
      haney_was_shipment_tracking_number_t:
        type: string
        description: Haney/WAS shipment tracking number
      terraton_experiment_on_box_t:
        type: boolean
        description: Terraton Experiment written on Box?
      microbial_shipment_tracking_number_t:
        type: string
        description: Microbial Shipment Tracking Number
    source: |
      select event_date 
        , event_id
        , update_date
        , grower_name
        , grower_id
        , farm_name
        , farm_id
        , field_name
        , field_id
        , zone_name
        , zone_id
        , event_group
        , event_name
        , entered_by_name
        , updated_by_name
        , ifnull(to_boolean(parse_json(trim(form_data:data,'"')):noIssue),False) as none_submitted                               
        , parse_json(db.geojson) as sample_location_t                                      
        , trim(event_data_object:barrier_to_sample_at_prescribed_site,'"') as barrier_to_sample_at_prescribed_site
        , event_data_object:soil_sampling_headlands as soil_sampling_headlands
        , event_data_object:carbon_sample_number as carbon_sample_number
        , trim(event_data_object:carbon_sample_location[0],'"') as carbon_sample_location
        , trim(event_data_object:carbon_soil_sampling_method[0],'"') as carbon_soil_sampling_method
        , trim(event_data_object:carbon_0_15_cm_qr_code,'"') as carbon_0_15_cm_qr_code
        , trim(event_data_object:unable_to_sample_carbon_0_15_cm,'"') as unable_to_sample_carbon_0_15_cm
        , trim(event_data_object:carbon_15_30_cm_qr_code,'"') as carbon_15_30_cm_qr_code
        , trim(event_data_object:unable_to_sample_carbon_15_30_cm,'"') as unable_to_sample_carbon_15_30_cm
        , event_data_object:red_sticker_added_to_both_soil_carbon_depths as red_sticker_added_to_both_soil_carbon_depths
        , event_data_object:bulk_density_sample_number as bulk_density_sample_number
        , trim(event_data_object:bulk_density_sample_location[0],'"') as bulk_density_sample_location
        , trim(event_data_object:bulk_density_0_15_cm_qr_code,'"') as bulk_density_0_15_cm_qr_code
        , event_data_object:bulk_density_depth_reached_cm_for_0_15_cm_core as bulk_density_depth_reached_cm_for_0_15_cm_core
        , trim(event_data_object:unable_to_sample_bulk_density_0_15_cm,'"') as unable_to_sample_bulk_density_0_15_cm
        , trim(event_data_object:bulk_density_15_30_cm_qr_code,'"') as bulk_density_15_30_cm_qr_code
        , event_data_object:bulk_density_depth_reached_cm_for_15_30_cm_core as bulk_density_depth_reached_cm_for_15_30_cm_core
        , trim(event_data_object:unable_to_sample_bulk_density_15_30_cm,'"') as unable_to_sample_bulk_density_15_30_cm
        , trim(event_data_object:research_site_number,'"') as research_site_number
        , trim(event_data_object:western_core_sample_location[0],'"') as western_core_sample_location
        , trim(event_data_object:west_1m_core_qr_code,'"') as west_1m_core_qr_code
        , trim(event_data_object:locator_serial_number_3m_east_core_1m,'"') as locator_serial_number_3m_west_core_1m
        , trim(event_data_object:western_1_meter_core_depth,'"') as western_1_meter_core_depth
        , trim(event_data_object:unable_to_sample_west_1m_core,'"') as unable_to_sample_west_1m_core
        , trim(event_data_object:eastern_core_sample_location[0],'"') as eastern_core_sample_location
        , trim(event_data_object:east_1m_core_qr_code,'"') as east_1m_core_qr_code
        , trim(event_data_object:locator_serial_number_3m_west_core_1m,'"') as locator_serial_number_3m_east_core_1m
        , trim(event_data_object:eastern_1_meter_core_depth,'"') as eastern_1_meter_core_depth
        , trim(event_data_object:unable_to_sample_east_1m_core,'"') as unable_to_sample_east_1m_core
        , trim(event_data_object:haney_wet_aggregate_stability_qr_code,'"') as haney_wet_aggregate_stability_qr_code
        , trim(event_data_object:microbrial_1_qr_code,'"') as microbrial_1_qr_code
        , trim(event_data_object:microbial_1_sample_location[0],'"') as microbial_1_sample_location
        , trim(event_data_object:microbrial_2_qr_code,'"') as microbrial_2_qr_code
        , trim(event_data_object:microbial_2_sample_location[0],'"') as microbial_2_sample_location
        , trim(event_data_object:microbrial_3_qr_code,'"') as microbrial_3_qr_code
        , trim(event_data_object:microbial_3_sample_location[0],'"') as microbial_3_sample_location
        , trim(event_data_object:microbrial_4_qr_code,'"') as microbrial_4_qr_code
        , trim(event_data_object:microbial_4_sample_location[0],'"') as microbial_4_sample_location
        , trim(event_data_object:microbrial_5_qr_code,'"') as microbrial_5_qr_code
        , trim(event_data_object:microbial_5_sample_location[0],'"') as microbial_5_sample_location
        , trim(event_data_object:microbrial_6_qr_code,'"') as microbrial_6_qr_code
        , trim(event_data_object:microbial_6_sample_location[0],'"') as microbial_6_sample_location
        , trim(event_data_object:microbrial_7_qr_code,'"') as microbrial_7_qr_code
        , trim(event_data_object:microbial_7_sample_location[0],'"') as microbial_7_sample_location
        , trim(event_data_object:microbrial_8_qr_code,'"') as microbrial_8_qr_code
        , trim(event_data_object:microbial_8_sample_location[0],'"') as microbial_8_sample_location
        , trim(event_data_object:microbrial_9_qr_code,'"') as microbrial_9_qr_code
        , trim(event_data_object:microbial_9_sample_location[0],'"') as microbial_9_sample_location
        , trim(event_data_object:carbon_shipment_tracking_number_t,'"') as carbon_shipment_tracking_number_t
        , trim(event_data_object:haney_was_shipment_tracking_number_t,'"') as haney_was_shipment_tracking_number_t
        , trim(event_data_object:terraton_experiment_on_box_t,'"') as terraton_experiment_on_box_t
        , trim(event_data_object:microbial_shipment_tracking_number_t,'"') as microbial_shipment_tracking_number_t
      from parthenon.agronomy.dca_event de
      join parthenon.dca_db.dca_boundarys db
      on de.boundary_id = db.id
      where form_template_name = 'Terraton'
      and grower_id not in (select id from parthenon.dca_db.dca_growers where error_status['test_account'] = true);
